# coding: utf-8

from __future__ import absolute_import
from datetime import date, datetime  # noqa: F401

from typing import List, Dict  # noqa: F401

from swagger_server.models.base_model_ import Model
from swagger_server import util


class Transaction(Model):
    """NOTE: This class is auto generated by the swagger code generator program.

    Do not edit the class manually.
    """

    def __init__(self, client_id: str = None, product_id: str = None, order_type: str = None, price: float = None,
                 quantity: int = None, timestamp: datetime = None):  # noqa: E501
        """Transaction - a model defined in Swagger

        :param client_id: The client_id of this Transaction.  # noqa: E501
        :type client_id: str
        :param product_id: The product_id of this Transaction.  # noqa: E501
        :type product_id: str
        :param order_type: The order_type of this Transaction.  # noqa: E501
        :type order_type: str
        :param price: The price of this Transaction.  # noqa: E501
        :type price: float
        :param quantity: The quantity of this Transaction.  # noqa: E501
        :type quantity: int
        :param timestamp: The timestamp of this Transaction.  # noqa: E501
        :type timestamp: datetime
        """
        self.swagger_types = {
            'client_id': str,
            'product_id': str,
            'order_type': str,
            'price': float,
            'quantity': int,
            'timestamp': datetime
        }

        self.attribute_map = {
            'client_id': 'clientId',
            'product_id': 'productId',
            'order_type': 'orderType',
            'price': 'price',
            'quantity': 'quantity',
            'timestamp': 'timestamp'
        }
        self._client_id = client_id
        self._product_id = product_id
        self._order_type = order_type
        self._price = price
        self._quantity = quantity
        self._timestamp = timestamp

    @classmethod
    def from_dict(cls, dikt) -> 'Transaction':
        """Returns the dict as a model

        :param dikt: A dict.
        :type: dict
        :return: The Transaction of this Transaction.  # noqa: E501
        :rtype: Transaction
        """
        return util.deserialize_model(dikt, cls)

    @property
    def client_id(self) -> str:
        """Gets the client_id of this Transaction.

        Client Identifier  # noqa: E501

        :return: The client_id of this Transaction.
        :rtype: str
        """
        return self._client_id

    @client_id.setter
    def client_id(self, client_id: str):
        """Sets the client_id of this Transaction.

        Client Identifier  # noqa: E501

        :param client_id: The client_id of this Transaction.
        :type client_id: str
        """

        self._client_id = client_id

    @property
    def product_id(self) -> str:
        """Gets the product_id of this Transaction.

        Product Identifier  # noqa: E501

        :return: The product_id of this Transaction.
        :rtype: str
        """
        return self._product_id

    @product_id.setter
    def product_id(self, product_id: str):
        """Sets the product_id of this Transaction.

        Product Identifier  # noqa: E501

        :param product_id: The product_id of this Transaction.
        :type product_id: str
        """

        self._product_id = product_id

    @property
    def order_type(self) -> str:
        """Gets the order_type of this Transaction.

        Buy/Sell  # noqa: E501

        :return: The order_type of this Transaction.
        :rtype: str
        """
        return self._order_type

    @order_type.setter
    def order_type(self, order_type: str):
        """Sets the order_type of this Transaction.

        Buy/Sell  # noqa: E501

        :param order_type: The order_type of this Transaction.
        :type order_type: str
        """
        allowed_values = ["buy", "sell"]  # noqa: E501
        if order_type not in allowed_values:
            raise ValueError(
                "Invalid value for `order_type` ({0}), must be one of {1}"
                .format(order_type, allowed_values)
            )

        self._order_type = order_type

    @property
    def price(self) -> float:
        """Gets the price of this Transaction.

        Per-Unit Price (inclusive of fee)  # noqa: E501

        :return: The price of this Transaction.
        :rtype: float
        """
        return self._price

    @price.setter
    def price(self, price: float):
        """Sets the price of this Transaction.

        Per-Unit Price (inclusive of fee)  # noqa: E501

        :param price: The price of this Transaction.
        :type price: float
        """

        self._price = price

    @property
    def quantity(self) -> int:
        """Gets the quantity of this Transaction.

        Number of Units  # noqa: E501

        :return: The quantity of this Transaction.
        :rtype: int
        """
        return self._quantity

    @quantity.setter
    def quantity(self, quantity: int):
        """Sets the quantity of this Transaction.

        Number of Units  # noqa: E501

        :param quantity: The quantity of this Transaction.
        :type quantity: int
        """

        self._quantity = quantity

    @property
    def timestamp(self) -> datetime:
        """Gets the timestamp of this Transaction.

        System Timestamp  # noqa: E501

        :return: The timestamp of this Transaction.
        :rtype: datetime
        """
        return self._timestamp

    @timestamp.setter
    def timestamp(self, timestamp: datetime):
        """Sets the timestamp of this Transaction.

        System Timestamp  # noqa: E501

        :param timestamp: The timestamp of this Transaction.
        :type timestamp: datetime
        """

        self._timestamp = timestamp
