# coding: utf-8

from __future__ import absolute_import
from datetime import date, datetime  # noqa: F401

from typing import List, Dict  # noqa: F401

from swagger_server.models.base_model_ import Model
from swagger_server import util


class Portfolio(Model):
    """NOTE: This class is auto generated by the swagger code generator program.

    Do not edit the class manually.
    """

    def __init__(self, client_id: str = None, life_to_date_fee_notional: float = None,
                 life_to_date_product_notional: float = None, outstanding_fee_notional: float = None,
                 outstanding_product_notional: float = None, weighted_average_realised_annualised_yield: float = None,
                 weighted_average_realised_duration: float = None):  # noqa: E501
        """Portfolio - a model defined in Swagger

        :param client_id: The client_id of this Portfolio.  # noqa: E501
        :type client_id: str
        :param life_to_date_fee_notional: The life_to_date_fee_notional of this Portfolio.  # noqa: E501
        :type life_to_date_fee_notional: float
        :param life_to_date_product_notional: The life_to_date_product_notional of this Portfolio.  # noqa: E501
        :type life_to_date_product_notional: float
        :param outstanding_fee_notional: The outstanding_fee_notional of this Portfolio.  # noqa: E501
        :type outstanding_fee_notional: float
        :param outstanding_product_notional: The outstanding_product_notional of this Portfolio.  # noqa: E501
        :type outstanding_product_notional: float
        :param weighted_average_realised_annualised_yield: The weighted_average_realised_annualised_yield of this Portfolio.  # noqa: E501
        :type weighted_average_realised_annualised_yield: float
        :param weighted_average_realised_duration: The weighted_average_realised_duration of this Portfolio.  # noqa: E501
        :type weighted_average_realised_duration: float
        """
        self.swagger_types = {
            'client_id': str,
            'life_to_date_fee_notional': float,
            'life_to_date_product_notional': float,
            'outstanding_fee_notional': float,
            'outstanding_product_notional': float,
            'weighted_average_realised_annualised_yield': float,
            'weighted_average_realised_duration': float
        }

        self.attribute_map = {
            'client_id': 'clientId',
            'life_to_date_fee_notional': 'lifeToDateFeeNotional',
            'life_to_date_product_notional': 'lifeToDateProductNotional',
            'outstanding_fee_notional': 'outstandingFeeNotional',
            'outstanding_product_notional': 'outstandingProductNotional',
            'weighted_average_realised_annualised_yield': 'weightedAverageRealisedAnnualisedYield',
            'weighted_average_realised_duration': 'weightedAverageRealisedDuration'
        }
        self._client_id = client_id
        self._life_to_date_fee_notional = life_to_date_fee_notional
        self._life_to_date_product_notional = life_to_date_product_notional
        self._outstanding_fee_notional = outstanding_fee_notional
        self._outstanding_product_notional = outstanding_product_notional
        self._weighted_average_realised_annualised_yield = weighted_average_realised_annualised_yield
        self._weighted_average_realised_duration = weighted_average_realised_duration

    @classmethod
    def from_dict(cls, dikt) -> 'Portfolio':
        """Returns the dict as a model

        :param dikt: A dict.
        :type: dict
        :return: The Portfolio of this Portfolio.  # noqa: E501
        :rtype: Portfolio
        """
        return util.deserialize_model(dikt, cls)

    @property
    def client_id(self) -> str:
        """Gets the client_id of this Portfolio.

        Client Identifier  # noqa: E501

        :return: The client_id of this Portfolio.
        :rtype: str
        """
        return self._client_id

    @client_id.setter
    def client_id(self, client_id: str):
        """Sets the client_id of this Portfolio.

        Client Identifier  # noqa: E501

        :param client_id: The client_id of this Portfolio.
        :type client_id: str
        """

        self._client_id = client_id

    @property
    def life_to_date_fee_notional(self) -> float:
        """Gets the life_to_date_fee_notional of this Portfolio.

        Notional amount of all fees ever charged for client  # noqa: E501

        :return: The life_to_date_fee_notional of this Portfolio.
        :rtype: float
        """
        return self._life_to_date_fee_notional

    @life_to_date_fee_notional.setter
    def life_to_date_fee_notional(self, life_to_date_fee_notional: float):
        """Sets the life_to_date_fee_notional of this Portfolio.

        Notional amount of all fees ever charged for client  # noqa: E501

        :param life_to_date_fee_notional: The life_to_date_fee_notional of this Portfolio.
        :type life_to_date_fee_notional: float
        """

        self._life_to_date_fee_notional = life_to_date_fee_notional

    @property
    def life_to_date_product_notional(self) -> float:
        """Gets the life_to_date_product_notional of this Portfolio.

        Notional amount of all products ever transacted with client  # noqa: E501

        :return: The life_to_date_product_notional of this Portfolio.
        :rtype: float
        """
        return self._life_to_date_product_notional

    @life_to_date_product_notional.setter
    def life_to_date_product_notional(self, life_to_date_product_notional: float):
        """Sets the life_to_date_product_notional of this Portfolio.

        Notional amount of all products ever transacted with client  # noqa: E501

        :param life_to_date_product_notional: The life_to_date_product_notional of this Portfolio.
        :type life_to_date_product_notional: float
        """

        self._life_to_date_product_notional = life_to_date_product_notional

    @property
    def outstanding_fee_notional(self) -> float:
        """Gets the outstanding_fee_notional of this Portfolio.

        Notional amount of outstanding fees with client  # noqa: E501

        :return: The outstanding_fee_notional of this Portfolio.
        :rtype: float
        """
        return self._outstanding_fee_notional

    @outstanding_fee_notional.setter
    def outstanding_fee_notional(self, outstanding_fee_notional: float):
        """Sets the outstanding_fee_notional of this Portfolio.

        Notional amount of outstanding fees with client  # noqa: E501

        :param outstanding_fee_notional: The outstanding_fee_notional of this Portfolio.
        :type outstanding_fee_notional: float
        """

        self._outstanding_fee_notional = outstanding_fee_notional

    @property
    def outstanding_product_notional(self) -> float:
        """Gets the outstanding_product_notional of this Portfolio.

        Notional amount of outstanding products for client  # noqa: E501

        :return: The outstanding_product_notional of this Portfolio.
        :rtype: float
        """
        return self._outstanding_product_notional

    @outstanding_product_notional.setter
    def outstanding_product_notional(self, outstanding_product_notional: float):
        """Sets the outstanding_product_notional of this Portfolio.

        Notional amount of outstanding products for client  # noqa: E501

        :param outstanding_product_notional: The outstanding_product_notional of this Portfolio.
        :type outstanding_product_notional: float
        """

        self._outstanding_product_notional = outstanding_product_notional

    @property
    def weighted_average_realised_annualised_yield(self) -> float:
        """Gets the weighted_average_realised_annualised_yield of this Portfolio.

        Annualised yield of fees weighted on notional amount of sold stock  # noqa: E501

        :return: The weighted_average_realised_annualised_yield of this Portfolio.
        :rtype: float
        """
        return self._weighted_average_realised_annualised_yield

    @weighted_average_realised_annualised_yield.setter
    def weighted_average_realised_annualised_yield(self, weighted_average_realised_annualised_yield: float):
        """Sets the weighted_average_realised_annualised_yield of this Portfolio.

        Annualised yield of fees weighted on notional amount of sold stock  # noqa: E501

        :param weighted_average_realised_annualised_yield: The weighted_average_realised_annualised_yield of this Portfolio.
        :type weighted_average_realised_annualised_yield: float
        """

        self._weighted_average_realised_annualised_yield = weighted_average_realised_annualised_yield

    @property
    def weighted_average_realised_duration(self) -> float:
        """Gets the weighted_average_realised_duration of this Portfolio.

        Average holding duration (days) weighted on notional amount of sold stock  # noqa: E501

        :return: The weighted_average_realised_duration of this Portfolio.
        :rtype: float
        """
        return self._weighted_average_realised_duration

    @weighted_average_realised_duration.setter
    def weighted_average_realised_duration(self, weighted_average_realised_duration: float):
        """Sets the weighted_average_realised_duration of this Portfolio.

        Average holding duration (days) weighted on notional amount of sold stock  # noqa: E501

        :param weighted_average_realised_duration: The weighted_average_realised_duration of this Portfolio.
        :type weighted_average_realised_duration: float
        """

        self._weighted_average_realised_duration = weighted_average_realised_duration
